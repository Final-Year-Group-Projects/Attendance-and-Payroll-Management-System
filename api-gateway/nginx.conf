events {}

http {
    upstream attendance_service {
        server attendance-service:8081;
    }
    upstream user_service {
        server user-service:8084;
    }
    upstream auth_service {
        server auth-service:8080;
    }
    upstream eureka_service {
        server eureka:8761;
    }

    server {
        listen 80;

        # Default location for health check or basic requests
        location / {
            return 200 "NGINX is running\n";
        }

        # Public endpoint for auth-service registration and login
        location /auth {
            proxy_pass http://auth_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Protected endpoints requiring token validation
        location /attendance {
            auth_request /auth/validate;
            error_page 401 403 500 502 503 504 = @handle_unauthorized;
            proxy_pass http://attendance_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Authorization $http_authorization;
            proxy_next_upstream error timeout http_502 http_503 http_504;
        }

        location /user {
            auth_request /auth/validate;
            error_page 401 403 500 502 503 504 = @handle_unauthorized;
            proxy_pass http://user_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Authorization $http_authorization;
            proxy_next_upstream error timeout http_502 http_503 http_504;
        }

        location /eureka {
            proxy_pass http://eureka_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_next_upstream error timeout http_502 http_503 http_504;
        }

       location = /auth/validate {
           internal;
           proxy_method POST;
           proxy_pass http://auth_service/validate;
           proxy_pass_request_body off;
           proxy_set_header Content-Length "";
           proxy_set_header X-Original-URI $request_uri;
           proxy_set_header Authorization $http_authorization;
           proxy_set_header Host "auth-service";
       }

        # Handle unauthorized access
        location @handle_unauthorized {
            return 401 "Unauthorized\n";
        }
    }
}